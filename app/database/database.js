const { Sequelize } = require("sequelize");
const pg = require("pg");
require("dotenv").config();

// Verifica se DATABASE_URL est√° definida
if (!process.env.DATABASE_URL) {
  console.error("üî¥ DATABASE_URL n√£o definida no arquivo .env");
  process.exit(1);
}

// Pega a URL de conex√£o do banco de dados a partir do .env
const databaseUrl = process.env.DATABASE_URL;

// Singleton para garantir que a conex√£o seja criada apenas uma vez
let sequelize;

if (!global.sequelize) {
  sequelize = new Sequelize(databaseUrl, {
    dialect: "postgres", // Usando PostgreSQL
    logging: false, // Desativa logs SQL
    dialectModule: pg, // Usa o driver pg
    pool: {
      max: 5, // M√°ximo de conex√µes no pool
      min: 0, // M√≠nimo de conex√µes
      acquire: 30000, // Tempo m√°ximo para adquirir conex√£o (30s)
      idle: 10000, // Tempo antes de liberar conex√£o inativa (10s)
    },
  });

  sequelize
    .authenticate()
    .then(() => console.log("üü¢ Conex√£o com o banco de dados bem-sucedida"))
    .catch((err) => {
      console.error("üî¥ Erro ao conectar no banco:", err);
      process.exit(1); // Encerra a aplica√ß√£o se n√£o conseguir conectar
    });

  global.sequelize = sequelize; // Armazena no objeto global para evitar m√∫ltiplas inst√¢ncias
} else {
  sequelize = global.sequelize;
}

module.exports = sequelize;
